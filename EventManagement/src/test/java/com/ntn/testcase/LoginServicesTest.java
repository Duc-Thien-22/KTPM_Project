/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.ntn.testcase;

import com.ntn.eventmanagement.ValidationUtils;
import com.ntn.pojo.User;
import org.junit.jupiter.api.Assertions;
import com.ntn.services.LoginServices;
import com.ntn.services.UserServices;
import java.sql.SQLException;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.*;
import org.mockito.junit.jupiter.*;
import org.mockito.*;

/**ck
 *
 * @author NHAT
 */
@ExtendWith(MockitoExtension.class)
public class LoginServicesTest {

    @Mock
    private UserServices userServices;

    @InjectMocks
    private LoginServices loginServices;

    @Test
    @DisplayName("Ki·ªÉm tra username r·ªóng v√† password r·ªóng")
    public void testUserNameNullAndPasswordNull() throws Exception {
        String result = loginServices.login("", "");
        Assertions.assertEquals("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng d·ªØ li·ªáu !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username r·ªóng v√† password h·ª£p l·ªá")
    public void testUserNameNullAndPassWordValid() throws Exception {
        String result = loginServices.login("", "Admin123@");

        Assertions.assertEquals("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng d·ªØ li·ªáu !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra Username h·ª£p l·ªá passoword  tr·ªëng")
    public void testUsernameValidPasswordNull() throws Exception {
        String result = loginServices.login("abc", "");

        Assertions.assertEquals("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng d·ªØ li·ªáu !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username kh√¥ng t·ªìn t·∫°i trong csdl v√† password h·ª£p l·ªá")
    public void testUserNameNotInDataBase() throws Exception {

        //d√πng mock ƒë·ªÉ kh√¥ng c·∫ßn truy c·∫≠p v√†o database th·ª±c t·∫ø
        Mockito.when(userServices.getUserByUsername("abc")).thenReturn(null);

        String result = loginServices.login("abc", "Admin123@");

        Assertions.assertEquals("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username b·ªã v√¥ hi·ªáu h√≥a")
    public void testUserDisable() throws SQLException, Exception {
        User userTest = new User();
        userTest.setUsername("test");
        userTest.setPassword(ValidationUtils.hashPassword("Admin123@"));
        userTest.setIsActive(Boolean.FALSE);

        Mockito.when(userServices.getUserByUsername("test")).thenReturn(userTest);

        String result = loginServices.login("test", "Admin123@");
        Assertions.assertEquals("t√†i kho·∫£n ƒë√£ b·ªã kh√≥a", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username h·ª£p l·ªá, Password kh√¥ng ƒë·ªß ƒë·ªô d√†i")
    public void testUserNameValidPasswordSizeInvalid() throws Exception {
        String result = loginServices.login("test", "admin2");
        Assertions.assertEquals(
                "Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát",
                result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username h·ª£p l·ªá, Password ƒë·ªß ƒë·ªô d√†i v√† b·∫Øt d·∫ßu b·∫±ng ch·ªØa th∆∞·ªùng")
    public void testUserNameValidPasswordStartNomalInvalid() throws Exception {
        String result = loginServices.login("test", "admin123@");
        Assertions.assertEquals(
                "Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát",
                result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username h·ª£p l·ªá, Password ƒë·ªß ƒë·ªô d√†i v√† b·∫Øt d·∫ßu b·∫±ng ch·ªØa hoa, kh√¥ng c√≥ k√≠ t·ª± ƒëƒÉng bi·ªát")
    public void testUserNameValidPasswordInvalid() throws Exception {
        String result = loginServices.login("test", "Admin123");
        Assertions.assertEquals(
                "Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát",
                result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username h·ª£p l·ªá, Password ƒë·ªß ƒë·ªô d√†i v√† b·∫Øt d·∫ßu b·∫±ng ch·ªØa hoa, c√≥ k√≠ t·ª± ƒë·∫∑c bi·ªát nh∆∞ng d√†i h∆°n 32 k√≠t t·ª±")
    public void testUserNameValidPasswordMaxSize() throws Exception {
        String result = loginServices.login("test", "Admin@12312578t6872468127681763183681736");
        Assertions.assertEquals(
                "Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát",
                result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra username h·ª£p l·ªá, Password h·ª£p l·ªá")
    public void testUserNameValidPasswordValid() throws Exception {
        User userTest = new User();
        userTest.setUsername("Admin");
        userTest.setPassword(ValidationUtils.hashPassword("Admin123@"));
        userTest.setIsActive(Boolean.TRUE);
        userTest.setRole("ADMIN");

        Mockito.when(userServices.getUserByUsername("Admin")).thenReturn(userTest);

        String result = loginServices.login("Admin", "Admin123@");
        Assertions.assertEquals("SUCCESS:ADMIN", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra l·ªói injection c·ªßa username")
    public void testUserNameInjectionError() throws Exception {
        String result = loginServices.login("OR 1=1 -- ", "Admin123@");
        Assertions.assertEquals("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra l·ªói injection ·ªü password")
    public void testPasswordInjectionError() throws Exception {
        String result = loginServices.login("Admin", "' OR '1'='1");
        Assertions.assertEquals("Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra l·ªói username c√≥ kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi")
    public void testUserNameStartEndSpace() throws SQLException, Exception {
        Mockito.when(userServices.getUserByUsername("abc")).thenReturn(null);

        String result = loginServices.login("  abc  ", "Admin123@");

        Assertions.assertEquals("B·∫°n ch∆∞a c√≥ t√†i kho·∫£n !!", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra l·ªói password c√≥ kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi")
    public void testPasswordStartEndSpace() throws SQLException, Exception {
        String result = loginServices.login("Admin", " Admin123@ ");

        Assertions.assertEquals(
                "Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát",
                result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra password ch·ª©a k√≠ t·ª± unicode ƒë·∫∑c bi·ªát")
    public void testPasswordWithUnicodeEmoji() throws Exception {
        String result = loginServices.login("Admin", "Admin123üòÄ");
        Assertions.assertEquals("Password √≠t nh·∫•t l√† 6 k√≠ t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng 1 k√≠ t·ª± In hoa, th∆∞·ªùng, ch·ªØ s·ªë v√† k√≠ t·ª± ƒë·∫∑c bi·ªát", result);
    }

    @Test
    @DisplayName("Ki·ªÉm tra password ƒë√∫ng nh∆∞ng hash kh√¥ng kh·ªõp")
    public void testCorrectPasswordButWrongHash() throws Exception {
        User userTest = new User();
        userTest.setUsername("Admin");
        userTest.setPassword("HASHED_WRONG"); // intentionally wrong
        userTest.setIsActive(Boolean.TRUE);
        userTest.setRole("ADMIN");

        Mockito.when(userServices.getUserByUsername("Admin")).thenReturn(userTest);

        String result = loginServices.login("Admin", "Admin123@");
        Assertions.assertEquals("Nh·∫≠p sai m·∫≠t kh·∫©u !!", result);
    }

    @Test
    @DisplayName("Test brute force: nh·∫≠p ƒë√∫ng username nh∆∞ng sai password nhi·ªÅu l·∫ßn")
    public void testBruteForceAttempts() throws Exception {
        User userTest = new User();
        userTest.setUsername("Admin");
        userTest.setPassword(ValidationUtils.hashPassword("Admin123@"));
        userTest.setIsActive(Boolean.TRUE);
        userTest.setRole("ADMIN");

        Mockito.when(userServices.getUserByUsername("Admin")).thenReturn(userTest);

        for (int i = 0; i <= 3; i++) {
            String result = loginServices.login("Admin", "Admin123@" + i);
            Assertions.assertEquals("Nh·∫≠p sai m·∫≠t kh·∫©u !!", result);
        }

        // L·∫ßn th·ª© 4 b·ªã ch·∫∑n
        String resultBlocked = loginServices.login("Admin", "Admin123@");
        Assertions.assertEquals("T√†i kho·∫£n b·ªã t·∫°m kh√≥a do ƒëƒÉng nh·∫≠p sai qu√° s·ªë l·∫ßn cho ph√©p", resultBlocked);
    }

    @Test
    @DisplayName("Ki·ªÉm tra th·ªùi gian x·ª≠ l√Ω login < 500ms")
    public void testLoginPerformance() throws Exception {
        User userTest = new User();
        userTest.setUsername("Admin");
        userTest.setPassword(ValidationUtils.hashPassword("Admin123@"));
        userTest.setIsActive(Boolean.TRUE);
        userTest.setRole("ADMIN");

        Mockito.when(userServices.getUserByUsername("Admin")).thenReturn(userTest);

        long start = System.currentTimeMillis();
        String result = loginServices.login("Admin", "Admin123@");
        long duration = System.currentTimeMillis() - start;

        Assertions.assertEquals("SUCCESS:ADMIN", result);
        Assertions.assertTrue(duration < 500, "Th·ªùi gian x·ª≠ l√Ω qu√° ch·∫≠m: " + duration + "ms");
    }
    
}
